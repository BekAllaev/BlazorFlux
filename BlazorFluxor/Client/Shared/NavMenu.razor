@inherits FluxorComponent
@using BlazorFluxor.Client.Store.Counter
@using BlazorFluxor.Client.Store.CounterHub;
@using BlazorFluxor.Client.Store.Weather
@inject IState<CounterState> counterState
@inject IState<WeatherState> weatherState
@inject IToastService toastService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorFluxor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter (@counterState.Value.CurrentCount)
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> <span class="@WeatherItemClass">Weather</span>
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="feedback">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Feedback
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private string? WeatherItemClass => weatherState.Value.Loading ? "font-weight-bold" : null;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShowWeatherToast(WeatherSetForecastsAction action)
    {
        toastService.ShowInfo("Weather Forecasts have been updated!");
    }

    private void ShowCountReceivedToast(CounterHubReceiveCountAction action)
    {
        toastService.ShowInfo($"Count received: {action.count}");
    }

    private void ShowCountReceivedFailedToast(CounterHubSendCountFailedAction action)
    {
        toastService.ShowError($"Count could not be broadcast: {action.message}");
    }

    private void ShowHubConnectedToast(CounterHubSetConnectedAction action)
    {
        if (action.connected)
        {
            toastService.ShowSuccess($"CounterHub connected!");
        }
        else
        {
            toastService.ShowError($"CounterHub disconnected!");
        }
    }

    protected override void OnInitialized()
    {
        SubscribeToAction<WeatherSetForecastsAction>(ShowWeatherToast);
        SubscribeToAction<CounterHubReceiveCountAction>(ShowCountReceivedToast);
        SubscribeToAction<CounterHubSendCountFailedAction>(ShowCountReceivedFailedToast);
        SubscribeToAction<CounterHubSetConnectedAction>(ShowHubConnectedToast);
        base.OnInitialized();
    }
}
